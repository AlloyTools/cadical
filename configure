#!/bin/sh

#--------------------------------------------------------------------------#

# Run './configure' to produce a 'makefile' in the 'build' sub-directory or
# in any immediate sub-directory different from the 'src', 'scripts' and
# 'test' directories.

#--------------------------------------------------------------------------#

# Common default options.

debug=no
stats=no
logging=no
check=no
coverage=no
profile=no
realloc=yes
quiet=no

#--------------------------------------------------------------------------#

die () {
  echo "*** cadical/configure: $*" 1>&2
  exit 1
}

msg () {
  echo "[cadical/configure] $*"
}

#--------------------------------------------------------------------------#

# generate and enter 'build' directory if not already in sub-directory

build_in_default_build_sub_directory () {
  if [ -d build ]
  then
    msg "reusing 'build' directory"
  else
    mkdir build 2>/dev/null || die "failed to generate 'build' directory"
    msg "making 'build' directory"
  fi
  cd build
  msg "building in '`pwd`/build'"
  build=build
}

if [ -f configure -a -f makefile.in -a -f VERSION -a -d src ]
then
  build_in_default_build_sub_directory
elif [ -f ../configure -a -f ../makefile.in -a -f ../VERSION -a -d ../src ]
then
  cwd=`pwd`
  build=`basename $cwd`
  case $build in
    src|test|scripts)
      cd ..
      build_in_default_build_sub_directory
      ;;
    *)
      msg "building in '$build' sub-directory"
      ;;
  esac
else
  die "call 'configure' from root of CaDiCaL source or a sub-directory"
fi

#--------------------------------------------------------------------------#

# Parse and handle command line options.

usage () {
cat << EOF
usage: configure [ <option> ... ]

where '<option>' is one of the following

-h|--help    print this command line summary
-g|--debug   compile with debugging information
-c|--check   compile with assertion checking (default for '-g')
-l|--log     include logging code (but disabled by default)
-s|--sats    include and enable expensive statistics code
-a|--all     short cut for all above, e.g., '-g -l -s' (thus also '-c')
-q|--quiet   exclude message and profiling code (logging and stats too)
--no-realloc use C++ style allocators for all tables
--coverage   compile with '-ftest-coverage -fprofile-arcs' for 'gcov'
--profile    compile with '-pg' to profile with 'gprof'
EOF
exit 0
}

while [ $# -gt 0 ]
do
  case $1 in
    -h|--help) usage;;
    -g|--debug) debug=yes; check=yes;;
    -c|--check) check=yes;;
    -l|--logging) logging=yes;;
    -s|--stats) stats=yes;;
    -a|--all) debug=yes;check=yes;logging=yes;stats=yes;;
    -q|--quiet) quiet=yes;;
    --no-realloc) realloc=no;;
    --coverage) coverage=yes;;
    --profile) profile=yes;;
    *) die "invalid option '$1' (try '-h')";;
  esac
  shift
done

if [ $quiet = yes ]
then
  logging=no
  stats=no
fi

#--------------------------------------------------------------------------#

# Prepare '@CXX@' and '@CXXFLAGS@' parameters for 'makefile.in'

[ x"$CXX" = x ] && CXX=g++
if [ x"$CXXFLAGS" ]
then
  case x"$CXX" in
    xg++*|xclang++*) CXXFLAGS="-Wall";;
    *) CXXFLAGS="-W";;
  esac
  if [ $debug = yes ]
  then
    CXXFLAGS="$CXXFLAGS -g"
  else
    case x"$CXX" in
      xg++*|xclang++*) CXXFLAGS="$CXXFLAGS -O3";;
      *) CXXFLAGS="$CXXFLAGS -O";;
    esac
  fi
fi

[ $check = no ] && CXXFLAGS="$CXXFLAGS -DNDEBUG"
[ $logging = yes ] && CXXFLAGS="$CXXFLAGS -DLOGGING"
[ $stats = yes ] && CXXFLAGS="$CXXFLAGS -DSTATS"
[ $quiet = yes ] && CXXFLAGS="$CXXFLAGS -DQUIET"
[ $realloc = no ] && CXXFLAGS="$CXXFLAGS -DNREALLOC"
[ $profile = yes ] && CXXFLAGS="$CXXFLAGS -pg"
[ $coverage = yes ] && CXXFLAGS="$CXXFLAGS -ftest-coverage -fprofile-arcs"

#--------------------------------------------------------------------------#

# Instantiate the '../makefile.in' template to produce 'makefile' in the
# build directory.

msg "compiling with '$CXX $CXXFLAGS'"
rm -f makefile
sed \
  -e "1,2d" \
  -e "1,1i# This 'makefile' is generated from '../makefile.in'." \
  -e "s,@CXX@,$CXX," \
  -e "s,@CXXFLAGS@,$CXXFLAGS," \
  ../makefile.in > makefile


msg "generated '$build/makefile' from '../makefile.in'"

#--------------------------------------------------------------------------#

build=`pwd`
cat <<EOF > ../makefile
CADICALBUILD=$build
all:
	make -C \$(CADICALBUILD)
clean:
	@if [ -d \$(CADICALBUILD) ]; \\
	then \\
	  if [ -f \$(CADICALBUILD)/makefile ]; \\
	  then \\
	     touch \$(CADICALBUILD)/config.hpp; \\
	     touch \$(CADICALBUILD)/dependencies; \\
	     make -C \$(CADICALBUILD) clean; \\
	  fi; \\
	  rmdir \$(CADICALBUILD); \\
	fi
	rm makefile
test:
	CADICALBUILD=\$(CADICALBUILD) make -C test
.PHONY: all clean test
EOF

msg "generated '../makefile' as proxy to '$build/makefile'"
msg "now run 'make' to compile CaDiCaL and optionally test it with 'make test'"
